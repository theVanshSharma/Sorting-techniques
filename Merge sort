Given an array arr[], its starting position l and its ending position r. Sort the array using merge sort algorithm.
LINK :- https://practice.geeksforgeeks.org/problems/merge-sort/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=merge-sort

class Solution
{
    public:
    void merge(int arr[], int l, int m, int r)
    {
         // Your code here
        //  int i,j,k;
        //  int n1=m-l+1;
        //  int n2=r-m;
        //  int L[n1],R[n2];
        //  for(i=0;i<n1;i++){
        //      L[i]=arr[l+i];
        //  }
        //  for(j=0;j<n2;j++){
        //      R[j]=arr[m+1+j];
        //  }
        //  i=0;
        //  j=0;
        //  k=l;
        //  while(i<n1 && j<n2){
        //      if(L[i]<=R[j]){
        //          arr[k]=L[i];
        //          i++;
        //          k++;
        //      }
        //      else{
        //          arr[k]=arr[j];
        //          k++;
        //          j++;
        //      }
        //  }
        //  while(i<n1){
        //      arr[k]=L[i];
        //      k++;
        //      i++;
        //  }
        //  while(j<n2){
        //      arr[k]=R[j];
        //      k++;
        //      j++;
        //  }
        int i = l ;        // starting index of left half of arr
        int j = m + 1;   // starting index of right half of arr
        int f = l ;        // index used to transfer elements in temporary array
        int temp[100000] ; // temporary array

        //storing elements in the temporary array in a sorted manner//

        while (i <= m && j <= r) {
            if (arr[i] < arr[j]) {
                temp[f] = arr[i]  ;
                i++ ;
            }
            else {
                temp[f] = arr[j]  ;
                j++ ;
            }
            f++ ;
        }

        // if elements on the left half are still left //

        if (i > m) {
            while (j <= r) {
                temp[f] = arr[j]  ;
                f++ ; j++ ;
            }
        }
        else {
            //  if elements on the right half are still left //
            while (i <= m) {
                temp[f] = arr[i]  ;
                f++ ; i++ ;
            }
        }

        // transfering all elements from temporary to arr //
        for (int f = l ; f <= r; f++) {
            arr[f] = temp[f] ;
        }
    }
    public:
    void mergeSort(int arr[], int l, int r)
    {
        //code here
        // if(l<r){
        //     int m=l+(r-l)/2;
        //     mergeSort(arr,l,m);
        //     mergeSort(arr,m+1,r);
        //     merge(arr,l,m,r);
        // }
        if (l < r) {
            int m = (l + r) / 2 ;
            mergeSort(arr, l, m)  ;  // left half
            mergeSort(arr, m + 1, r)  ; // right half
            merge(arr, l, m, r)  ;  // merging sorted halves
        }
    }
};
